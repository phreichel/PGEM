//*************************************************************************************************
package pgem.model;
//*************************************************************************************************

import javax.vecmath.Matrix3f;
import javax.vecmath.Vector3f;

//*************************************************************************************************
public class RigidBody {

	//=============================================================================================
	private float    mass         = 1f;
	private Matrix3f inertia      = new Matrix3f(1, 0, 0, 0, 1, 0, 0, 0, 1);
	//=============================================================================================

	//=============================================================================================
	private Vector3f location     = new Vector3f(0, 0, 0);
	private Vector3f velocity     = new Vector3f(0, 0, 0);
	private Vector3f acceleration = new Vector3f(0, 0, 0);
	private Vector3f momentum     = new Vector3f(0, 0, 0);
	//=============================================================================================

	//=============================================================================================
	private Vector3f angularMomentum = new Vector3f(0, 0, 0);
	//=============================================================================================
	
	//=============================================================================================
	private Vector3f force  = new Vector3f();
	private Vector3f torque = new Vector3f();
	//=============================================================================================

	//=============================================================================================
	public void resetForces() {
		force.set(0, 0, 0);
		torque.set(0, 0, 0);
	}
	//=============================================================================================

	//=============================================================================================
	public void addForce(Vector3f force) {
		force.add(force);
	}
	//=============================================================================================

	//=============================================================================================
	public void addTorque(Vector3f torque) {
		torque.add(torque);
	}
	//=============================================================================================

	//=============================================================================================
	public void addLinearImpulse(Vector3f impulse) {
		momentum.add(impulse);
	}
	//=============================================================================================

	//=============================================================================================
	public void addAngularImpulse(Vector3f impulse) {
		angularMomentum.add(impulse);
	}
	//=============================================================================================
	
	//=============================================================================================
	public void update(float dT) {
		updateLinearProperties(dT);
		updateAngularProperties(dT);
	}
	//=============================================================================================

	//=============================================================================================
	private void updateLinearProperties(float dT) {

		final var massInv = 1f / mass;
		
		acceleration.set(force);
		acceleration.scale(massInv);
		
		final var velocityRate = new Vector3f(acceleration);
		velocityRate.scale(dT);

		final var momentumRate = new Vector3f(force);
		momentumRate.scale(dT);
		
		momentum.add(momentumRate);
		velocity.add(velocityRate);

		final var locationRate = new Vector3f(velocity);
		locationRate.scale(dT);
		
		location.add(locationRate);
		
	}
	//=============================================================================================

	//=============================================================================================
	private void updateAngularProperties(float dT) {

		var inertiaInv = new Matrix3f(inertia);
		inertiaInv.invert();
		
	}
	//=============================================================================================
	
}
//*************************************************************************************************
